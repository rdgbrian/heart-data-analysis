anova_result= aov(Density ~ Group, data = BoneDensity)
summary(anova_result)
TukeyHSD(anova_result)
plot(TukeyHSD(anova_result))
# Perform ANOVA
anova_result= aov(Density ~ Group, data = BoneDensity)
summary(anova_result)
TukeyHSD(anova_result)
plot(TukeyHSD(anova_result),col=3)
boxplot(BoneDensity)
col = c("lightblue", "lightgreen", "lightpink")
# Box plot using base R
boxplot(Density ~ Group, data = BoneDensity,
xlab = "Group",
col = c("lightblue", "lightgreen", "lightpink")
# Perform ANOVA
anova_result= aov(Density ~ Group, data = BoneDensity)
# Box plot using base R
ggplot(BoneDensity, aes(x = Group, y = Density, fill = Group)) +
geom_boxplot() +
labs(title = "Bone Density by Group", x = "Group", y = "Density") +
theme_minimal()
library(ggplot2)
# Box plot using base R
ggplot(BoneDensity, aes(x = Group, y = Density, fill = Group)) +
geom_boxplot() +
labs(title = "Bone Density by Group", x = "Group", y = "Density") +
theme_minimal()
# Box plot using base R
ggplot(BoneDensity, aes(x = Group, y = Density, fill = Group)) +
geom_boxplot() +
labs(title = "Bone Density by Group", x = "Group", y = "Density")
# Perform ANOVA
anova_result= aov(Density ~ Group, data = BoneDensity)
summary(anova_result)
TukeyHSD(anova_result)
# Perform ANOVA
anova_result= aov(Density ~ Group, data = BoneDensity)
summary(anova_result)
summary(anova_result)
summary(anova_result)
summary(anova_result)
summary(anova_result)
TukeyHSD(anova_result)
# Perform ANOVA
anova_result= aov(Density ~ Group, data = BoneDensity)
anova_result
var(control)
var(low_jump)
var(high_jump)
qqnorm(control)
qqline()
qline()
qqline(control)
qqnorm(low_jumo)
qqnorm(low_jump)
qqnorm(high_jump)
qqline(high_jump)
#
A = c(10, 8, 12, 11, 9,7, 9, 8, 10)
B = c(12, 11, 13, 10, 14, 16, 15, 13, 10)
t.test(A,B)
prop.test(50,100)
prop.test(x=155,n=500,p=0.3)
prop.test(x=155,n=500,p=0.3)
prop.test(x=155,n=500,p=0.3,corrected=FALSE)
prop.test(x=155,n=500,p=0.3,correct=FALSE)
prop.test(x=155,n=500,p=0.3,correct=FALSE)
prop.test(x=c(90,70),n=c(300,250))
#Q1 from Linear regression
Stocks = c(12.8, 34.6, 28.8, -23.3, 8.3, 17.1, 50.6, 97.0, 151.3, 133.6, 140.1, 238.2, 243.5, 165.9, 194.3, 309.0)
Bonds = c(100.8, 161.8, 10.6, -5.8, -1.4, 9.2, 74.6, 87.1, 84.6, -72.0, -6.8, 3.3, 30.0, 79.2, -6.2, -48.)
plot(Stocks, Bonds, ylim=c(-150, 200))
plot(Bonds~Stocks)
lm1=lm(Bonds~Stocks)
summary(lm1)
abline(lm1)
summary(lm1)
abline(lm1)
plot(lm1)
plot(Stocks, Bonds, ylim=c(-150, 200))
lm1=lm(Bonds~Stocks)
summary(lm1)
# Bonds=53.4096-0.1962*Stocks
abline(lm1)
## Check assumptions
plot(lm1)
## Adding Prediction intervals and confidence Intervals to the scatter plot
range(Stocks)
xs=data.frame(Stocks=seq(-20, 310, 20))
Confs=predict(lm1, newdata  =xs, interval="confidence")
Confs
## For Confidence intervals
Confs=predict(lm1, newdata  =xs, interval="confidence")
Confs
xs
matlines(xs, Confs, col=2)
Preds=predict(lm1, newdata  =xs, interval="predict")
Preds
xs
matlines(xs, Preds, col=4)
summary(lm1)
matlines(xs, Confs, col=2)
## For Confidence intervals
Confs=predict(lm1, newdata  =xs, interval="confidence")
Confs
xs
plot(Stocks, Bonds, ylim=c(-150, 200))
abline(lm1)
matlines(xs, Confs, col=2)
Preds=predict(lm1, newdata  =xs, interval="predict")
Preds
xs
plot(Stocks, Bonds, ylim=c(-150, 200))
abline(lm1)
matlines(xs, Preds, col=4)
summary(lm1)
prop.test(x=c(45, 60), n=c(150, 200))
prop.test(x=c(90, 70), n=c(300, 250))
summary(model)
summary(lm1)
Year = c(75,76,77,78,79,80,81,82,83,84,85,86,87)
Lean = c(642, 644, 656, 667, 673, 688, 696, 698, 713, 717, 725, 742, 757)
# a)
## Stocks is independent variable or explanatory variable
plot(Year, Lean, ylim=c(-150, 200))
lm1=lm(Lean~Year)
# b)
summary(lm1)
## Estimated least sqaure regression line
abline(lm1)
## Check assumptions
plot(lm1)
Lean = c(642, 644, 656, 667, 673, 688, 696, 698, 713, 717, 725, 742, 757)
# a)
## Stocks is independent variable or explanatory variable
plot(Year, Lean, ylim=c(-150, 200))
Year = c(75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87)
Lean = c(642, 644, 656, 667, 673, 688, 696, 698, 713, 717, 725, 742, 757)
# a)
## Stocks is independent variable or explanatory variable
plot(Year, Lean)
lms=lm(Lean~Year)
# b)
summary(lm1)
## Estimated least sqaure regression line
abline(lms)
## Check assumptions
plot(lms)
confint(lm2, level = 0.99)
# a)
## Stocks is independent variable or explanatory variable
plot(Year, Lean)
lm2 =lm(Lean~Year)
# b)
summary(lm2)
## Estimated least sqaure regression line
abline(lm2)
confint(lm2, level = 0.99)
# a)
## Stocks is independent variable or explanatory variable
plot(Year, Lean)
lm2 =lm(Lean~Year)
BP = c(148.6,
195.7,
151,
166.2,
177.8,
165.1,
174.70,
164.3,
152.5,
202.3,
171.7,
150.90,
159.6,
141.6,
160.1,
166.4,
162.0,
214.2,
179.7,
178.1,
198.3)
PlasmaE = c(80.80,550.,70,66,120,281.6,296.7,217.3,88,268,265.5,227.5,29.35,139.35,173.8,224.,183.6,441.6,612.8,401.6,132.0)
# a)
## Stocks is independent variable or explanatory variable
plot(BP, PlasmaE)
lm3 =lm(BP~PlasmaE)
# b)
summary(lm3)
## Estimated least sqaure regression line
abline(lm3)
BP = c(148.6,
195.7,
151,
166.2,
177.8,
165.1,
174.70,
164.3,
152.5,
202.3,
171.7,
150.90,
159.6,
141.6,
160.1,
166.4,
162.0,
214.2,
179.7,
178.1,
198.3)
PlasmaE = c(80.80,550.,70,66,120,281.6,296.7,217.3,88,268,265.5,227.5,29.35,139.35,173.8,224.,183.6,441.6,612.8,401.6,132.0)
# a)
## Stocks is independent variable or explanatory variable
plot(BP, PlasmaE)
lm3 =lm(PlasmaE~BP)
# b)
summary(lm3)
## Estimated least sqaure regression line
abline(lm3)
source("~/University-Stuff/Fall-2024/Data Analysis I/Assignments/Regression/regression.R")
PBV = c(168,280,391,420,303,429,605,522,224,291,233,370,531,516,211,439)
PBF = c(4.31,3.4,6.2,17.3,12.3,13.9,8.73,8.9,5.0,3.51,4.24,19.41,16.61,7.21,11.6)
length(PBV)
length(PBF)
PBV = c(168, 280, 391, 420, 303, 429, 605, 522, 224, 291, 233, 370, 531, 516, 211, 439)
PBF = c(4.31,3.4,6.2,17.3,12.3,13.9,8.73,8.9,5.0,3.51,4.24,19.41,16.61,7.21,11.6)
length(PBV)
length(PBF)
PBV = c(168, 280, 391, 420, 303, 429, 605, 522, 224, 291, 233, 370, 531, 516, 211, 439)
PBF = c(4.31,3.4,6.2 ,17.3, 12.3, 13.99, 8.73 ,8.9, 5.87, 5.0, 3.51,4.24,19.41,16.61,7.21,11.6)
length(PBV)
length(PBF)
PBV = sc(168, 280, 391, 420, 303, 429, 605, 522, 224, 291, 233, 370, 531, 516, 211, 439)
PBF = c(4.31,3.4,6.2 ,17.3, 12.3, 13.99, 8.73 ,8.9, 5.87, 5.0, 3.51,4.24,19.41,16.61,7.21,11.6)
PBV = c(168, 280, 391, 420, 303, 429, 605, 522, 224, 291, 233, 370, 531, 516, 211, 439)
PBF = c(4.31,3.4,6.2 ,17.3, 12.3, 13.99, 8.73 ,8.9, 5.87, 5.0, 3.51,4.24,19.41,16.61,7.21,11.6)
length(PBV)
length(PBF)
# a)
## Stocks is independent variable or explanatory variable
plot(PBF, PBV)
lm4 =lm(PBV~PBF)
# a)
## Stocks is independent variable or explanatory variable
plot(PBF, PBV)
lm4 =lm(PBV~PBF)
# b)
summary(lm4)
## Estimated least sqaure regression line
abline(lm4)
## Check assumptions
plot(lm4)
age = c(63,26,53,31,58,49,58,70,70,20,63,43,26,19,31,23)
bp = c(141,126,134,128,136,132,140,144,146,124,143,130,124,121,126,123)
length(age)
length(bp)
age = c(63,26,53,31,58,49,58,70,70,20,63,43,26,19,31,23)
bp = c(141,126,134,128,136,132,140,144,146,124,143,130,124,121,126,123)
length(age)
length(bp)
# a)
## Stocks is independent variable or explanatory variable
plot(bp~age)
lm4 =lm(bp~age)
# b)
summary(lm4)
## Estimated least sqaure regression line
abline(lm4)
## Check assumptions
plot(lm4)
weight = c(64,75.3,73.0,82.1,76.2,95.7,59.4,93.4,82.1,78.9,76.7,82.1,78.9,76.7,82.1,83.9,73.0,64.4,77.6)
glucose = c(108,109,104,102,105,121,79,107,101,85,99,100,108,104,102,87)
length(weight)
length(glucose)
weight = c(64, 75.3 ,73.0 ,82.1 ,76.2 ,95.7 ,59.4 ,93.4 ,82.1 ,78.9 ,76.7 ,82.1 , 83.9,73.0,64.4,77.6)
glucose = c(108,109,104,102,105,121,79,107,101,85,99,100,108,104,102,87)
length(weight)
length(glucose)
# Load required packages
library(ISwR)
library(ggplot2)
library(MASS)   # For confidence interval of correlation
library(boot)   # For prediction intervals
# Data: rmr dataset
data("rmr", package = "ISwR")
# a) Scatter plot: metabolic rate vs body weight
ggplot(rmr, aes(x = body.weight, y = metabolic.rate)) +
geom_point() +
labs(title = "Scatter Plot of Metabolic Rate vs Body Weight",
x = "Body Weight (kg)",
y = "Metabolic Rate") +
theme_minimal()
# b) Fit a linear regression model
fit <- lm(metabolic.rate ~ body.weight, data = rmr)
# Predicted metabolic rate for a body weight of 70 kg
predicted_rate <- predict(fit, newdata = data.frame(body.weight = 70))
cat("Predicted metabolic rate for 70 kg body weight:", predicted_rate, "\n")
# c) 95% confidence interval for regression coefficient
confint_coeff <- confint(fit, level = 0.95)
cat("95% Confidence Interval for Regression Coefficient:\n")
print(confint_coeff)
# d) Compute Pearsonâ€™s correlation coefficient
correlation <- cor(rmr$body.weight, rmr$metabolic.rate)
cat("Pearson's Correlation Coefficient:", correlation, "\n")
# e) Find 90% confidence interval for the correlation coefficient
cor_test <- cor.test(rmr$body.weight, rmr$metabolic.rate, conf.level = 0.90)
cat("90% Confidence Interval for Correlation Coefficient:\n")
print(cor_test$conf.int)
cat("Interpretation: There is",
ifelse(cor_test$p.value < 0.05, "significant", "no significant"),
"evidence of a linear relationship.\n")
# f) Test for significant linear correlation
cat("Hypothesis Test for Linear Correlation:\n")
print(cor_test)
# g) Add confidence interval and prediction interval to the plot
# Compute intervals
new_data <- data.frame(body.weight = seq(min(rmr$body.weight), max(rmr$body.weight), length.out = 100))
confidence_interval <- predict(fit, newdata = new_data, interval = "confidence")
prediction_interval <- predict(fit, newdata = new_data, interval = "prediction")
# Combine intervals into a single data frame
intervals <- cbind(new_data, confidence_interval, prediction_interval)
# Plot with intervals and regression line
ggplot(rmr, aes(x = body.weight, y = metabolic.rate)) +
geom_point() +
geom_line(data = intervals, aes(y = fit), color = "blue") +
geom_ribbon(data = intervals, aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "blue", inherit.aes = FALSE) +
geom_ribbon(data = intervals, aes(ymin = lwr.1, ymax = upr.1), alpha = 0.2, fill = "red", inherit.aes = FALSE) +
labs(title = "Regression Line with Confidence and Prediction Intervals",
x = "Body Weight (kg)",
y = "Metabolic Rate") +
theme_minimal()
# Data: rmr dataset
data("rmr", package = "ISwR")
# a) Scatter plot: metabolic rate vs body weight
ggplot(rmr, aes(x = body.weight, y = metabolic.rate)) +
geom_point() +
labs(title = "Scatter Plot of Metabolic Rate vs Body Weight",
x = "Body Weight (kg)",
y = "Metabolic Rate") +
theme_minimal()
# b) Fit a linear regression model
fit <- lm(metabolic.rate ~ body.weight, data = rmr)
# Predicted metabolic rate for a body weight of 70 kg
predicted_rate <- predict(fit, newdata = data.frame(body.weight = 70))
cat("Predicted metabolic rate for 70 kg body weight:", predicted_rate, "\n")
# c) 95% confidence interval for regression coefficient
confint_coeff <- confint(fit, level = 0.95)
cat("95% Confidence Interval for Regression Coefficient:\n")
print(confint_coeff)
# d) Compute Pearsonâ€™s correlation coefficient
correlation <- cor(rmr$body.weight, rmr$metabolic.rate)
cat("Pearson's Correlation Coefficient:", correlation, "\n")
# e) Find 90% confidence interval for the correlation coefficient
cor_test <- cor.test(rmr$body.weight, rmr$metabolic.rate, conf.level = 0.90)
cat("90% Confidence Interval for Correlation Coefficient:\n")
print(cor_test$conf.int)
cat("Interpretation: There is",
ifelse(cor_test$p.value < 0.05, "significant", "no significant"),
"evidence of a linear relationship.\n")
# f) Test for significant linear correlation
cat("Hypothesis Test for Linear Correlation:\n")
print(cor_test)
# g) Add confidence interval and prediction interval to the plot
# Compute intervals
new_data <- data.frame(body.weight = seq(min(rmr$body.weight), max(rmr$body.weight), length.out = 100))
confidence_interval <- predict(fit, newdata = new_data, interval = "confidence")
prediction_interval <- predict(fit, newdata = new_data, interval = "prediction")
# Combine intervals into a single data frame
intervals <- cbind(new_data, confidence_interval, prediction_interval)
# Plot with intervals and regression line
ggplot(rmr, aes(x = body.weight, y = metabolic.rate)) +
geom_point() +
geom_line(data = intervals, aes(y = fit), color = "blue") +
geom_ribbon(data = intervals, aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "blue", inherit.aes = FALSE) +
geom_ribbon(data = intervals, aes(ymin = lwr.1, ymax = upr.1), alpha = 0.2, fill = "red", inherit.aes = FALSE) +
labs(title = "Regression Line with Confidence and Prediction Intervals",
x = "Body Weight (kg)",
y = "Metabolic Rate") +
theme_minimal()
# g) Add confidence interval and prediction interval to the plot
# Compute intervals
new_data <- data.frame(body.weight = seq(min(rmr$body.weight), max(rmr$body.weight), length.out = 100))
confidence_interval <- predict(fit, newdata = new_data, interval = "confidence")
prediction_interval <- predict(fit, newdata = new_data, interval = "prediction")
# Combine intervals into a single data frame
intervals <- cbind(new_data, confidence_interval, prediction_interval)
# Plot with intervals and regression line
ggplot(rmr, aes(x = body.weight, y = metabolic.rate)) +
geom_point() +
geom_line(data = intervals, aes(y = fit), color = "blue") +
geom_ribbon(data = intervals, aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = "blue", inherit.aes = FALSE) +
geom_ribbon(data = intervals, aes(ymin = lwr.1, ymax = upr.1), alpha = 0.2, fill = "red", inherit.aes = FALSE) +
labs(title = "Regression Line with Confidence and Prediction Intervals",
x = "Body Weight (kg)",
y = "Metabolic Rate") +
theme_minimal()
# Load necessary libraries
library(car)         # For VIF calculation
library(ggplot2)     # For visualizations
library(ggpubr)      # For arranging plots
set.seed(123)        # Ensure reproducibility
# Generate dummy data
n <- 100
data <- data.frame(
X1 = rnorm(n, mean = 50, sd = 10),
X2 = rnorm(n, mean = 30, sd = 5),
X3 = rnorm(n, mean = 10, sd = 2),
Y  = 5 + 0.5 * rnorm(n, mean = 50, sd = 10) - 0.2 * rnorm(n, mean = 30, sd = 5) + 0.8 * rnorm(n, mean = 10, sd = 2) + rnorm(n, mean = 0, sd = 5)
)
# Perform multiple linear regression
model <- lm(Y ~ X1 + X2 + X3, data = data)
# Calculate Variance Inflation Factor (VIF)
vif_values <- vif(model)
vif_values
# Check assumptions
# 1. Linearity and Equal Variance (Residuals vs. Fitted)
plot1 <- ggplot(data, aes(x = fitted(model), y = residuals(model))) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
# 2. Normality of Residuals
plot2 <- ggplot(data, aes(sample = residuals(model))) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "QQ Plot", x = "Theoretical Quantiles", y = "Sample Quantiles") +
theme_minimal()
# 3. Histogram of Residuals
plot3 <- ggplot(data, aes(x = residuals(model))) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.7) +
geom_density(color = "red") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Density") +
theme_minimal()
# Arrange plots
assumption_plots <- ggarrange(plot1, plot2, plot3, ncol = 2, nrow = 2)
plot1
plot2
plot3
# Predictions
new_data <- data.frame(X1 = c(45, 55), X2 = c(25, 35), X3 = c(9, 11))
predictions <- predict(model, newdata = new_data, interval = "confidence")
predictions_ci <- predict(model, newdata = new_data, interval = "prediction")
# Output results
print("Variance Inflation Factor (VIF):")
print(vif_values)
print("\nModel Summary:")
print(model_summary)
print("\nPrediction Intervals for Predictions:")
print(predictions_ci)
# Plot assumption checks
print(assumption_plots)
plot(model)
model_summary
# Get model summary
model_summary <- summary(model)
model_summary
data <- data.frame(
X1 = rnorm(n, mean = 50, sd = 10),
X2 = rnorm(n, mean = 30, sd = 5),
X3 = rnorm(n, mean = 10, sd = 2),
Y  = 5 + 0.5 * rnorm(n, mean = 50, sd = 0.1) - 0.2 * rnorm(n, mean = 30, sd = 0.1) + 0.8 * rnorm(n, mean = 10, sd = 0.1) + rnorm(n, mean = 0, sd = 0.1)
)
# Perform multiple linear regression
model <- lm(Y ~ X1 + X2 + X3, data = data)
# Calculate Variance Inflation Factor (VIF)
vif_values <- vif(model)
# Get model summary
model_summary <- summary(model)
plot(model)
# Output results
print("Variance Inflation Factor (VIF):")
print(vif_values)
print("\nConfidence Intervals for Predictions:")
print(predictions)
print("\nPrediction Intervals for Predictions:")
print(predictions_ci)
plot1
plot2
plot3
model_summary
# Generate a dummy DataFrame
set.seed(123)  # Ensure reproducibility
n <- 100
data <- data.frame(
X1 = rnorm(n, mean = 50, sd = 10),
X2 = rnorm(n, mean = 30, sd = 5),
X3 = rnorm(n, mean = 10, sd = 2)
)
# Calculate Pearson correlation matrix
correlation_matrix <- cor(data, method = "pearson")
# Print the correlation matrix
print("Pearson Correlation Matrix:")
print(correlation_matrix)
model_summary
# Set seed for reproducibility
set.seed(123)
# Generate dummy data for three groups
group <- rep(c("A", "B", "C"), each = 20)  # Three groups (A, B, C)
values <- c(rnorm(20, mean = 10, sd = 2),  # Group A
rnorm(20, mean = 12, sd = 2),  # Group B
rnorm(20, mean = 15, sd = 2))  # Group C
# Create a data frame
data <- data.frame(group = factor(group), values = values)
# Perform ANOVA test
anova_result <- aov(values ~ group, data = data)
summary(anova_result)  # Print ANOVA table
126/3.4
help(df)
